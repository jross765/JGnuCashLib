package org.gnucash.apiext.depot;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.gnucash.base.basetypes.simple.GCshID;
import org.gnucash.api.numbers.FixedPointNumber;
import org.gnucash.api.read.GnucashAccount;
import org.gnucash.api.read.GnucashTransactionSplit;
import org.gnucash.api.read.UnknownAccountTypeException;
import org.gnucash.api.write.GnucashWritableTransaction;
import org.gnucash.api.write.GnucashWritableTransactionSplit;
import org.gnucash.api.write.impl.GnucashWritableFileImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DepotTransactionManager {
    
    public enum Type {
	BUY_STOCK,
	DIVIDEND
    }
    
    // ---------------------------------------------------------------
    
    // Logger
    private static final Logger LOGGER = LoggerFactory.getLogger(DepotTransactionManager.class);

    // ---------------------------------------------------------------
    
    public static GnucashWritableTransaction genBuyStockTrx(
	    final GnucashWritableFileImpl gcshFile,
	    final GCshID stockAcctID,
	    final GCshID taxFeeAcctID,
	    final GCshID offsetAcctID,
	    final FixedPointNumber nofStocks,
	    final FixedPointNumber stockPrc,
	    final FixedPointNumber taxesFees,
	    final LocalDate postDate,
	    final String descr) throws UnknownAccountTypeException {
	
	if ( gcshFile == null ) {
	    throw new IllegalArgumentException("null GnuCash file given");
	}
		
	if ( stockAcctID == null  ||
	     taxFeeAcctID == null ||
	     offsetAcctID == null ) {
	    throw new IllegalArgumentException("null account ID given");
	}
	
	if ( ! ( stockAcctID.isSet()  ) ||
	     ! ( taxFeeAcctID.isSet() ) ||
	     ! ( offsetAcctID.isSet() ) ) {
	    throw new IllegalArgumentException("unset account ID given");
	}
		
	if ( nofStocks == null  ||
		     stockPrc == null ||
		     taxesFees == null ) {
	    throw new IllegalArgumentException("null amount given");
	}
	
	if ( nofStocks.doubleValue() <= 0.0 ) {
	    throw new IllegalArgumentException("number of stocks <= 0.0 given");
	}
				
	if ( stockPrc.doubleValue() <= 0.0 ) {
	    throw new IllegalArgumentException("stock price <= 0.0 given");
	}
				
	if ( taxesFees.doubleValue() <= 0.0 ) {
	    throw new IllegalArgumentException("taxes/fees <= 0.0 given");
	}

	LOGGER.debug("genBuyStockTrx: Account 1 name (stock):      '" + gcshFile.getAccountByID(stockAcctID).getQualifiedName() + "'");
	LOGGER.debug("genBuyStockTrx: Account 2 name (taxes/fees): '" + gcshFile.getAccountByID(taxFeeAcctID).getQualifiedName() + "'");
	LOGGER.debug("genBuyStockTrx: Account 3 name (offsetting): '" + gcshFile.getAccountByID(offsetAcctID).getQualifiedName() + "'");

	// ---
	// Check account types
	GnucashAccount stockAcct  = gcshFile.getAccountByID(stockAcctID);
	GnucashAccount taxFeeAcct = gcshFile.getAccountByID(taxFeeAcctID);
	GnucashAccount offsetAcct = gcshFile.getAccountByID(offsetAcctID);
	
	if ( stockAcct.getType() != GnucashAccount.Type.STOCK ) {
	    throw new IllegalArgumentException("Account with ID " + stockAcctID + " is not of type " + GnucashAccount.Type.STOCK);
	}

	if ( taxFeeAcct.getType() != GnucashAccount.Type.EXPENSE ) {
	    throw new IllegalArgumentException("Account with ID " + taxFeeAcctID + " is not of type " + GnucashAccount.Type.EXPENSE);
	}

	if ( offsetAcct.getType() != GnucashAccount.Type.BANK ) {
	    throw new IllegalArgumentException("Account with ID " + offsetAcctID + " is not of type " + GnucashAccount.Type.BANK);
	}

	// ---

	FixedPointNumber amtNet   = nofStocks.copy().multiply(stockPrc);
	LOGGER.debug("genBuyStockTrx: Net amount: " + amtNet);
	FixedPointNumber amtGross = amtNet.copy().add(taxesFees);
	LOGGER.debug("genBuyStockTrx: Gross amount: " + amtGross);

	// ---

	GnucashWritableTransaction trx = gcshFile.createWritableTransaction();
	trx.setDescription(descr);

	// ---
	
	String spltDescr = "Generated by DepotTransactionManager, " + LocalDateTime.now();

	GnucashWritableTransactionSplit splt1 = trx.createWritableSplit(offsetAcct);
	splt1.setValue(new FixedPointNumber(amtGross.negate()));
	splt1.setQuantity(new FixedPointNumber(amtGross.negate()));
	splt1.setDescription(spltDescr);
	LOGGER.debug("genBuyStockTrx: Split 1 to write: " + splt1.toString());

	// ---
	
	GnucashWritableTransactionSplit splt2 = trx.createWritableSplit(stockAcct);
	splt2.setValue(new FixedPointNumber(amtNet));
	splt2.setQuantity(new FixedPointNumber(nofStocks));
	splt2.setAction(GnucashTransactionSplit.Action.BUY);
	splt2.setDescription(spltDescr);
	LOGGER.debug("genBuyStockTrx: Split 2 to write: " + splt2.toString());

	// ---

	GnucashWritableTransactionSplit splt3 = trx.createWritableSplit(taxFeeAcct);
	splt3.setValue(new FixedPointNumber(taxesFees));
	splt3.setQuantity(new FixedPointNumber(taxesFees));
	splt3.setDescription(spltDescr);
	LOGGER.debug("genBuyStockTrx: Split 3 to write: " + splt3.toString());

	// ---

	trx.setDatePosted(postDate);
	trx.setDateEntered(LocalDateTime.now());

	// ---

	LOGGER.info("genBuyStockTrx: Generated new Transaction: " + trx.getID());
	return trx;
    }
    
    public static GnucashWritableTransaction genDivivendTrx(
    	    final GnucashWritableFileImpl gcshFile,
    	    final GCshID stockAcctID,
    	    final GCshID incomeAcctID,
    	    final GCshID taxAcctID,
    	    final GCshID offsetAcctID,
    	    final FixedPointNumber divGross,
    	    final FixedPointNumber taxes,
    	    final LocalDate postDate,
    	    final String descr) throws UnknownAccountTypeException {
    	
    	if ( gcshFile == null ) {
    	    throw new IllegalArgumentException("null KMyMoney file given");
    	}
    		
    	if ( stockAcctID == null  ||
    	     incomeAcctID == null ||
    	     taxAcctID == null ||
    	     offsetAcctID == null ) {
    	    throw new IllegalArgumentException("null account ID given");
    	}
    	
    	if ( ! ( stockAcctID.isSet()  ) ||
    	     ! ( incomeAcctID.isSet() ) ||
    	     ! ( taxAcctID.isSet() ) ||
    	     ! ( offsetAcctID.isSet() ) ) {
    	    throw new IllegalArgumentException("unset account ID given");
    	}
    		
    	if ( divGross == null  ||
    	     taxes == null ) {
    	    throw new IllegalArgumentException("null amount given");
    	}

    	// CAUTION: The following two: In fact, this can happen
    	// (negative booking after cancellation / Stornobuchung)
//    	if ( divGross.doubleValue() <= 0.0 ) {
//    	    throw new IllegalArgumentException("gross dividend <= 0.0 given");
//    	}
//    				
//    	if ( taxes.doubleValue() <= 0.0 ) {
//    	    throw new IllegalArgumentException("taxes <= 0.0 given");
//    	}
    				
    	LOGGER.debug("genDivivendTrx: Account 1 name (stock):      '" + gcshFile.getAccountByID(stockAcctID).getQualifiedName() + "'");
    	LOGGER.debug("genDivivendTrx: Account 2 name (income):     '" + gcshFile.getAccountByID(incomeAcctID).getQualifiedName() + "'");
    	LOGGER.debug("genDivivendTrx: Account 3 name (tax):        '" + gcshFile.getAccountByID(taxAcctID).getQualifiedName() + "'");
    	LOGGER.debug("genDivivendTrx: Account 4 name (offsetting): '" + gcshFile.getAccountByID(offsetAcctID).getQualifiedName() + "'");

    	// ---
    	// Check account types
    	GnucashAccount stockAcct  = gcshFile.getAccountByID(stockAcctID);
    	GnucashAccount incomeAcct = gcshFile.getAccountByID(incomeAcctID);
    	GnucashAccount taxAcct    = gcshFile.getAccountByID(taxAcctID);
    	GnucashAccount offsetAcct = gcshFile.getAccountByID(offsetAcctID);
    	
    	if ( stockAcct.getType() != GnucashAccount.Type.STOCK ) {
    	    throw new IllegalArgumentException("Account with ID " + stockAcctID + " is not of type " + GnucashAccount.Type.STOCK);
    	}

    	if ( incomeAcct.getType() != GnucashAccount.Type.INCOME ) {
    	    throw new IllegalArgumentException("Account with ID " + incomeAcct + " is not of type " + GnucashAccount.Type.INCOME);
    	}

    	if ( taxAcct.getType() != GnucashAccount.Type.EXPENSE ) {
    	    throw new IllegalArgumentException("Account with ID " + incomeAcct + " is not of type " + GnucashAccount.Type.EXPENSE);
    	}

    	if ( offsetAcct.getType() != GnucashAccount.Type.BANK ) {
    	    throw new IllegalArgumentException("Account with ID " + offsetAcctID + " is not of type " + GnucashAccount.Type.BANK);
    	}

    	// ---

    	FixedPointNumber divNet = divGross.copy().subtract(taxes);
    	LOGGER.debug("genDivivendTrx: Net dividend: " + divNet);

    	// ---

    	GnucashWritableTransaction trx = gcshFile.createWritableTransaction();
	trx.setDescription(descr);

    	// ---
    	
	String spltDescr = "Generated by DepotTransactionManager, " + LocalDateTime.now();

    	GnucashWritableTransactionSplit splt1 = trx.createWritableSplit(stockAcct);
    	splt1.setValue(new FixedPointNumber());
    	splt1.setQuantity(new FixedPointNumber());
    	splt1.setAction(GnucashTransactionSplit.Action.DIVIDEND);
    	splt1.setDescription(spltDescr);
    	LOGGER.debug("genDivivendTrx: Split 1 to write: " + splt1.toString());

    	// ---

    	GnucashWritableTransactionSplit splt2 = trx.createWritableSplit(offsetAcct);
    	splt2.setValue(new FixedPointNumber(divNet));
    	splt2.setQuantity(new FixedPointNumber(divNet));
    	splt2.setDescription(spltDescr);
    	LOGGER.debug("genDivivendTrx: Split 2 to write: " + splt2.toString());

    	// ---

    	GnucashWritableTransactionSplit splt3 = trx.createWritableSplit(incomeAcct);
    	splt3.setValue(new FixedPointNumber(divGross.negate()));
    	splt3.setQuantity(new FixedPointNumber(divGross.negate()));
    	splt3.setDescription(spltDescr);
    	LOGGER.debug("genDivivendTrx: Split 3 to write: " + splt3.toString());

    	// ---

    	GnucashWritableTransactionSplit splt4 = trx.createWritableSplit(taxAcct);
    	splt4.setValue(new FixedPointNumber(taxes));
    	splt4.setQuantity(new FixedPointNumber(taxes));
    	splt4.setDescription(spltDescr);
    	LOGGER.debug("genDivivendTrx: Split 4 to write: " + splt4.toString());

    	// ---

    	trx.setDatePosted(postDate);
    	trx.setDateEntered(LocalDateTime.now());

    	// ---

    	LOGGER.info("genDivivendTrx: Generated new Transaction: " + trx.getID());
    	return trx;
    }
        
}
