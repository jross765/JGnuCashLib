package org.gnucash.apiext.depot;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.gnucash.api.basetypes.simple.GCshID;
import org.gnucash.api.numbers.FixedPointNumber;
import org.gnucash.api.read.GnucashAccount;
import org.gnucash.api.read.GnucashTransactionSplit;
import org.gnucash.api.read.UnknownAccountTypeException;
import org.gnucash.api.write.GnucashWritableTransaction;
import org.gnucash.api.write.GnucashWritableTransactionSplit;
import org.gnucash.api.write.impl.GnucashWritableFileImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DepotTransactionManager {
    
    public enum Type {
	BUY_STOCK
    }
    
    // Logger
    private static final Logger LOGGER = LoggerFactory.getLogger(DepotTransactionManager.class);

    // ---------------------------------------------------------------
    
    public static GnucashWritableTransaction genBuyStockTrx(
	    final GnucashWritableFileImpl gcshFile,
	    final GCshID stockAcctID,
	    final GCshID taxFeeAcctID,
	    final GCshID offsetAcctID,
	    final FixedPointNumber nofStocks,
	    final FixedPointNumber stockPrc,
	    final FixedPointNumber taxesFees,
	    final LocalDate postDate,
	    final String descr) throws UnknownAccountTypeException {
	
	if ( gcshFile == null ) {
	    throw new IllegalArgumentException("null GnuCash file given");
	}
		
	if ( stockAcctID == null  ||
	     taxFeeAcctID == null ||
	     offsetAcctID == null ) {
	    throw new IllegalArgumentException("null account ID given");
	}
	
	if ( ! ( stockAcctID.isSet()  ) ||
	     ! ( taxFeeAcctID.isSet() ) ||
	     ! ( offsetAcctID.isSet() ) ) {
	    throw new IllegalArgumentException("unset account ID given");
	}
		
	LOGGER.debug("genBuyStockTrx: Account 1 name (offsetting): '" + gcshFile.getAccountByID(offsetAcctID).getQualifiedName() + "'");
	LOGGER.debug("genBuyStockTrx: Account 2 name (stock):      '" + gcshFile.getAccountByID(stockAcctID).getQualifiedName() + "'");
	LOGGER.debug("genBuyStockTrx: Account 3 name (taxes/fees): '" + gcshFile.getAccountByID(taxFeeAcctID).getQualifiedName() + "'");

	// ---
	// Check account types
	GnucashAccount stockAcct  = gcshFile.getAccountByID(stockAcctID);
	GnucashAccount taxFeeAcct = gcshFile.getAccountByID(taxFeeAcctID);
	GnucashAccount offsetAcct = gcshFile.getAccountByID(offsetAcctID);
	
	if ( stockAcct.getType() != GnucashAccount.Type.STOCK ) {
	    throw new IllegalArgumentException("Account with ID " + stockAcctID + " is not of type " + GnucashAccount.Type.STOCK);
	}

	if ( taxFeeAcct.getType() != GnucashAccount.Type.EXPENSE ) {
	    throw new IllegalArgumentException("Account with ID " + taxFeeAcctID + " is not of type " + GnucashAccount.Type.EXPENSE);
	}

	if ( offsetAcct.getType() != GnucashAccount.Type.BANK ) {
	    throw new IllegalArgumentException("Account with ID " + offsetAcctID + " is not of type " + GnucashAccount.Type.BANK);
	}

	// ---

	FixedPointNumber amtNet   = nofStocks.copy().multiply(nofStocks);
	LOGGER.debug("genBuyStockTrx: Net amount: " + amtNet);
	FixedPointNumber amtGross = amtNet.copy().add(taxesFees);
	LOGGER.debug("genBuyStockTrx: Gross amount: " + amtGross);

	// ---

	GnucashWritableTransaction trx = gcshFile.createWritableTransaction();
	// Does not work like that: The description/memo on transaction
	// level is purely internal:
	// trx.setDescription(description);
	trx.setDescription("genBuyStockTrx: Generated by DepotTransactionManager, " + LocalDateTime.now());

	// ---

	GnucashWritableTransactionSplit splt1 = trx.createWritableSplit(offsetAcct);
	splt1.setValue(new FixedPointNumber(amtGross.negate()));
	splt1.setQuantity(new FixedPointNumber(amtGross.negate()));
	// splt3.setPrice("1/1"); // completely optional
	// This is what we actually want (cf. above):
	splt1.setDescription(descr);
	LOGGER.debug("genBuyStockTrx: Split 1 to write: " + splt1.toString());

	// ---
	
	GnucashWritableTransactionSplit splt2 = trx.createWritableSplit(stockAcct);
	splt2.setValue(new FixedPointNumber(amtNet));
	splt2.setQuantity(new FixedPointNumber(nofStocks));
	splt2.setAction(GnucashTransactionSplit.Action.BUY);
	// Cf. above
	splt2.setDescription(descr);
	LOGGER.debug("genBuyStockTrx: Split 2 to write: " + splt2.toString());

	// ---

	GnucashWritableTransactionSplit splt3 = trx.createWritableSplit(taxFeeAcct);
	splt3.setValue(new FixedPointNumber(taxesFees));
	splt3.setQuantity(new FixedPointNumber(taxesFees));
	// splt3.setPrice("1/1"); // completely optional
	// Cf. above
	splt3.setDescription(descr);
	LOGGER.debug("genBuyStockTrx: Split 3 to write: " + splt3.toString());

	// ---

	trx.setDatePosted(postDate);
	trx.setDateEntered(LocalDateTime.now());

	// ---

	LOGGER.info("genBuyStockTrx: Generated new Transaction: " + trx.getID());
	return trx;
    }
    
}
